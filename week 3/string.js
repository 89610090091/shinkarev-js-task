// Создание
const str = 'содержимое моей строки' // с любыми ковычками '' "" `${}`
// Так можно, но не нужно
const strObj = new String('содержимое моей строки')
// Для обращения к самой строке придётся пользоваться методом
strObj.valueOf() // содержимое моей строки
// а typeof будет возвращать 'object'
typeof (strObj) === 'object'

// Доступ к символам
str[1] === 'о'
str.charAt(1) === 'о'
// Единственная разница, кроме простоты написания
str[1000] === undefined
str.charAt(1000) === ''
// Изменение символов игнорируется. Строки не изменяемы!
str[1] = 'A'
str[1] === 'о' // true

// Добавление к строке
const str = 'соединение ' + 'строк'
// Если хотим добавить значение из переменной
const value = 123;
const str = `значение этой переменной равно: ${value}`


// Сравнение строк происходит посимвольно от первого к последнему символу.
// Сравниваются не сами символы а их юникод, который можете подсмотреть в гугле.
// Основное, что нужно знать - символы в юникоде выстроены по алфавиту,
// сначала все в верхнем регистре, потом все в нижнем регистре.
'A' < 'a' === true
'a' < 'b' === true

// Внутри строки можно экранировать символы
const str = 'содержимое \'с ковычками\' внутри'
// Некоторые из них ключевые. На MDN есть с ними таблица.
// Ниже самые распространённые:
'\n' // новая строка
'\t' // табуляция

// Если строка слишком длинная, то экранируем перенос строки
const str = 'Ну оооочень длиннная строка. Она такая длинная, что не \
помещается на экране.'
// Ещё можно так
const str = 'Ну оооочень длиннная строка. Она такая длинная, что не '
    + 'помещается на экране.'

// Любой символ можно получить, зная его юникод
String.fromCharCode(0x3C0) // π
String.fromCharCode(0x0A7) // §

// Каждая строка знает свою длинну
const str = 'содержимое моей строки'
str.length === 22

// Изменение длинны игнорируется
str.length = 12
str.length === 22 //true

const str = 'содержимое моей строки'
// Основные методы строк
// Объединение
const newStr = str.concat('123') // 'содержимое моей строки123'
// Проверка на содержание подстроки
const isIncludes = str.includes('мое') // true
// Проверка начала / конца строки
str.startsWith('содержи') // true
str.endsWith('ей строки') // true
// Индекс подстроки. Раньше метод использовался для проверки содержания подстроки
const index = str.indexOf('моей') // index === 11
// Повторение несколько раз
const str = '*'
const stars = str.repeat(5) // '*****'
// Замена подстроки
const newStr = str.replace('o', 'О') // newStr === 'сОдержимое моей строки'
// Относительно новый метод. Не всегда работает.
const newStr = str.replaceAll('o', 'О') // newStr === 'сОдержимОе мОей стрОки'
// Отрезать часть строки
const substing = str.slice(5, 10) // substing === 'жимое'
const substing = str.substring(5, 10) // substing === 'жимое'
// Разделить на массив строк
const arr = '123'
const strArray = str.split('') // strArray = ['1', '2', '3']
// Привести к нижнему или верхнему регистру
str.toLowerCase()
str.toUpperCase()
// Обрезать пробельные символы в начале и конце
const str = '    __123    '
const newStr = str.trim() // newStr === '123'